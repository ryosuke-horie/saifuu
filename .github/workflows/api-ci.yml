name: API CI (Self-hosted Runner)

on:
  # プルリクエストで自動実行
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'api/**'
      - '.github/workflows/api-ci.yml'
  # mainブランチへのpushは引き続き自動実行
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - '.github/workflows/api-ci.yml'
  # 手動トリガー（デバッグ用に残す）
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number'
        required: false
        type: string

# GitHub Actions無料枠節約のため、同一PRで複数実行時は前の実行をキャンセル
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  api-checks:
    name: API Quality Checks & Tests
    runs-on: self-hosted
    timeout-minutes: 15
    
    # PRコメント投稿権限を追加
    permissions:
      contents: read
      pull-requests: write
    
    defaults:
      run:
        working-directory: api
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '22'
          # セルフホストランナーの制約によりキャッシュは無効
          # cache: 'pnpm'
          # cache-dependency-path: api/pnpm-lock.yaml
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Install dependencies
        run: |
          # better-sqlite3のビルドスクリプトを許可
          echo "side-effects-cache=false" > ../.npmrc
          echo "onlyBuiltDependencies[]=better-sqlite3" >> ../.npmrc
          pnpm install --frozen-lockfile
          # ビルドが失敗した場合の追加対策
          if [ ! -f ../node_modules/better-sqlite3/build/Release/better_sqlite3.node ]; then
            echo "Rebuilding better-sqlite3..."
            pnpm rebuild better-sqlite3 --store-dir ~/.pnpm-store
          fi
      
      - name: Type check
        run: pnpm run typecheck
      
      - name: Biome check
        run: pnpm run check
      
      - name: Build check
        run: pnpm run build
      
      - name: Unit tests with coverage
        run: pnpm run test:unit:coverage
        
      - name: Integration tests
        run: pnpm run test:integration
        
      - name: Coverage report
        if: github.event_name == 'pull_request'
        run: |
          # Extract coverage summary from json-summary
          COVERAGE_SUMMARY=$(cat coverage/coverage-summary.json)
          LINES_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.lines.pct')
          STATEMENTS_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.statements.pct')
          FUNCTIONS_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.functions.pct')
          BRANCHES_PCT=$(echo $COVERAGE_SUMMARY | jq -r '.total.branches.pct')
          
          # Create coverage comment
          {
            echo "## 📊 API Test Coverage Report"
            echo ""
            echo "| Metric | Coverage |"
            echo "|--------|----------|"
            echo "| **Lines** | ${LINES_PCT}% |"
            echo "| **Statements** | ${STATEMENTS_PCT}% |"
            echo "| **Functions** | ${FUNCTIONS_PCT}% |"
            echo "| **Branches** | ${BRANCHES_PCT}% |"
            echo ""
            echo "### ✅ Test Types Executed"
            echo "- **Unit Tests**: Testing individual functions and modules"
            echo "- **Integration Tests**: Testing API endpoints with database interactions"
            echo ""
            echo "_Generated by GitHub Actions_"
          } > coverage_comment.md
          
          # Post or update comment to PR
          node ../.github/scripts/update-pr-comment.js "API_COVERAGE_REPORT" "$(cat coverage_comment.md)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
