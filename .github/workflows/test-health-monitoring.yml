name: Test Health Monitoring

on:
  # プルリクエストで自動実行
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'frontend/**'
      - 'api/**'
      - 'scripts/monitor-test-ratio*.js'
      - '.github/workflows/test-health-monitoring.yml'
  # mainブランチへのpushで実行
  push:
    branches:
      - main
  # 定期実行（毎週月曜日の朝9時）
  schedule:
    - cron: '0 0 * * 1'
  # 手動実行
  workflow_dispatch:

jobs:
  test-metrics:
    name: Test Health Metrics
    runs-on: self-hosted
    timeout-minutes: 20
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '22'
      
      # テストコード比率の監視
      - name: Check test code ratio
        id: test_ratio
        run: |
          echo "## 🔍 テストコード比率分析" > test_ratio_report.md
          echo "" >> test_ratio_report.md
          
          # テスト比率チェックを実行
          node scripts/monitor-test-ratio-simple.js >> test_ratio_output.txt 2>&1 || true
          
          # 結果をマークダウンに整形
          if grep -q "❌ 基準違反ファイル" test_ratio_output.txt; then
            echo "### ⚠️ テストコード比率の基準違反が検出されました" >> test_ratio_report.md
            echo "" >> test_ratio_report.md
            echo "以下のファイルでテストコードが過剰になっています：" >> test_ratio_report.md
            echo "" >> test_ratio_report.md
            echo "\`\`\`" >> test_ratio_report.md
            grep -A 4 "基準違反ファイル" test_ratio_output.txt | tail -n +2 | head -20 >> test_ratio_report.md
            echo "\`\`\`" >> test_ratio_report.md
            echo "violation_found=true" >> $GITHUB_OUTPUT
          else
            echo "### ✅ すべてのファイルがテストコード比率基準内です" >> test_ratio_report.md
            echo "violation_found=false" >> $GITHUB_OUTPUT
          fi
          
          # 全体統計を追加
          echo "" >> test_ratio_report.md
          echo "### 📊 全体統計" >> test_ratio_report.md
          grep -A 5 "全体統計" test_ratio_output.txt >> test_ratio_report.md
      
      # Frontend テスト実行時間の計測
      - name: Measure Frontend test execution time
        working-directory: frontend
        run: |
          echo "## ⏱️ Frontend テスト実行時間" > frontend_test_time.md
          echo "" >> frontend_test_time.md
          
          # 依存関係のインストール
          npm ci
          
          # テスト実行時間を計測
          START_TIME=$(date +%s)
          npm run test:unit -- --reporter=json > test_results.json 2>&1 || true
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "- **実行時間**: ${DURATION}秒" >> frontend_test_time.md
          
          # テスト数を抽出
          if [ -f test_results.json ]; then
            TEST_COUNT=$(jq -r '.numTotalTests // 0' test_results.json 2>/dev/null || echo "0")
            PASS_COUNT=$(jq -r '.numPassedTests // 0' test_results.json 2>/dev/null || echo "0")
            echo "- **テスト総数**: ${TEST_COUNT}" >> frontend_test_time.md
            echo "- **成功数**: ${PASS_COUNT}" >> frontend_test_time.md
          fi
          
          # 実行時間の警告閾値（60秒）
          if [ $DURATION -gt 60 ]; then
            echo "" >> frontend_test_time.md
            echo "⚠️ **警告**: テスト実行時間が60秒を超えています。テストの最適化を検討してください。" >> frontend_test_time.md
          fi
      
      # API テスト実行時間の計測
      - name: Measure API test execution time
        working-directory: api
        run: |
          echo "## ⏱️ API テスト実行時間" > api_test_time.md
          echo "" >> api_test_time.md
          
          # 依存関係のインストール
          npm ci
          
          # ユニットテスト実行時間を計測
          START_TIME=$(date +%s)
          npm run test:unit -- --reporter=json > unit_test_results.json 2>&1 || true
          END_TIME=$(date +%s)
          UNIT_DURATION=$((END_TIME - START_TIME))
          
          echo "### ユニットテスト" >> api_test_time.md
          echo "- **実行時間**: ${UNIT_DURATION}秒" >> api_test_time.md
          
          # 統合テスト実行時間を計測
          START_TIME=$(date +%s)
          npm run test:integration -- --reporter=json > integration_test_results.json 2>&1 || true
          END_TIME=$(date +%s)
          INTEGRATION_DURATION=$((END_TIME - START_TIME))
          
          echo "" >> api_test_time.md
          echo "### 統合テスト" >> api_test_time.md
          echo "- **実行時間**: ${INTEGRATION_DURATION}秒" >> api_test_time.md
          
          TOTAL_DURATION=$((UNIT_DURATION + INTEGRATION_DURATION))
          echo "" >> api_test_time.md
          echo "### 合計" >> api_test_time.md
          echo "- **総実行時間**: ${TOTAL_DURATION}秒" >> api_test_time.md
          
          # 実行時間の警告閾値（90秒）
          if [ $TOTAL_DURATION -gt 90 ]; then
            echo "" >> api_test_time.md
            echo "⚠️ **警告**: テスト実行時間が90秒を超えています。テストの最適化を検討してください。" >> api_test_time.md
          fi
      
      # PRコメントの作成
      - name: Create PR comment
        if: github.event_name == 'pull_request'
        run: |
          {
            echo "# 📋 テストヘルスチェックレポート"
            echo ""
            cat test_ratio_report.md
            echo ""
            echo "---"
            echo ""
            cat frontend/frontend_test_time.md
            echo ""
            echo "---"
            echo ""
            cat api/api_test_time.md
            echo ""
            echo "---"
            echo ""
            echo "_このレポートはテストの健全性を監視し、開発効率の向上を支援します。_"
            echo ""
            echo "_Generated by Test Health Monitoring workflow_"
          } > health_report.md
          
          # PRコメントを投稿
          node .github/scripts/update-pr-comment.js "TEST_HEALTH_REPORT" "$(cat health_report.md)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 定期実行時はサマリーをArtifactとして保存
      - name: Save periodic report
        if: github.event.schedule
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
        with:
          name: test-health-report-${{ github.run_id }}
          path: |
            test_ratio_output.txt
            frontend/test_results.json
            api/unit_test_results.json
            api/integration_test_results.json
          retention-days: 30