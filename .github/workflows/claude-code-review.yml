name: Claude Code Review

on:
  issue_comment:
    types: [created]

jobs:
  claude-review:
    # PRコメントで@claudeがメンションされた場合のみ実行
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@claude')
    
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write  # コメント作成のために write に変更
      issues: write        # issue_comment イベントでコメント作成に必要
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # PR全体の変更を取得するため

      # PR情報を取得してブランチをチェックアウト
      - name: Get PR branch
        id: pr-info
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          PR_DATA=$(gh pr view $PR_NUMBER --json headRefName,headRepository --jq '{branch: .headRefName, repo: .headRepository.owner.login + "/" + .headRepository.name}')
          echo "branch=$(echo $PR_DATA | jq -r .branch)" >> $GITHUB_OUTPUT
          echo "repo=$(echo $PR_DATA | jq -r .repo)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr-info.outputs.repo }}
          ref: ${{ steps.pr-info.outputs.branch }}
          fetch-depth: 0

      # 過去のレビューコメントを取得
      - name: Get previous review comments
        id: previous-reviews
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          
          # PRのレビューコメントを取得
          echo "Fetching review comments for PR #$PR_NUMBER..."
          REVIEW_COMMENTS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/comments --paginate || echo "[]")
          
          # 通常のPRコメントも取得
          echo "Fetching issue comments for PR #$PR_NUMBER..."
          ISSUE_COMMENTS=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments --paginate || echo "[]")
          
          # Claude Code Action のコメントを識別（botユーザーまたは特定の形式を持つコメント）
          # sticky comment の識別パターンも含む
          echo "$REVIEW_COMMENTS" > review_comments.json
          echo "$ISSUE_COMMENTS" > issue_comments.json
          
          # レビュー履歴サマリーを作成
          REVIEW_HISTORY="以前のレビュー履歴："
          
          # Claude関連のコメントを抽出して履歴に追加
          CLAUDE_REVIEW_COMMENTS=$(jq -r '.[] | select(.user.type == "Bot" or .body | contains("Claude Code Action") or .body | contains("<!-- claude-code-sticky-comment")) | "- " + (.created_at | split("T")[0]) + ": " + (.body | split("\n")[0:3] | join(" "))' review_comments.json 2>/dev/null || echo "")
          CLAUDE_ISSUE_COMMENTS=$(jq -r '.[] | select(.user.type == "Bot" or .body | contains("Claude Code Action") or .body | contains("<!-- claude-code-sticky-comment")) | "- " + (.created_at | split("T")[0]) + ": " + (.body | split("\n")[0:3] | join(" "))' issue_comments.json 2>/dev/null || echo "")
          
          # 履歴を環境変数として保存（複数行対応）
          if [ -n "$CLAUDE_REVIEW_COMMENTS" ] || [ -n "$CLAUDE_ISSUE_COMMENTS" ]; then
            {
              echo "REVIEW_HISTORY<<EOF"
              echo "$REVIEW_HISTORY"
              if [ -n "$CLAUDE_REVIEW_COMMENTS" ]; then
                echo "$CLAUDE_REVIEW_COMMENTS"
              fi
              if [ -n "$CLAUDE_ISSUE_COMMENTS" ]; then
                echo "$CLAUDE_ISSUE_COMMENTS"
              fi
              echo "EOF"
            } >> $GITHUB_ENV
            echo "has_previous_reviews=true" >> $GITHUB_OUTPUT
          else
            {
              echo "REVIEW_HISTORY<<EOF"  
              echo "レビュー履歴なし"
              echo "EOF"
            } >> $GITHUB_ENV
            echo "has_previous_reviews=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v0.0.45
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          allowed_tools: "mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_comments"
          
          # コメントトリガーによるレビュー用のプロンプト
          direct_prompt: |
            ユーザーから @claude メンションでレビューが要求されました。
            
            ${{ env.REVIEW_HISTORY }}
            
            このプルリクエスト（PR）をレビューし、GitHub のレビュー機能を使ってフィードバックをしてください。作業は次の手順に沿って進めてください：
            
            1.  **過去のレビューを確認する:** `mcp__github__get_pull_request_comments` を使って、このPRの既存のレビューコメントを取得し、既に指摘された内容を把握します。上記のレビュー履歴も参考にしてください。
            2.  **レビューを開始する:** `mcp__github__create_pending_pull_request_review` を使って、保留中のレビューを開始します。
            3.  **変更内容を確認する:** `mcp__github__get_pull_request_diff` を使って、コードの変更点や行番号を把握します。
            4.  **インラインコメントを追加する:** 改善点や懸念事項があるコードの行には `mcp__github__add_pull_request_review_comment_to_pending_review` を使ってコメントを追加してください。修正方針が明確な場合には積極的にsuggestionを利用してください。
            5.  **レビューを提出する:** `mcp__github__submit_pending_pull_request_review` を使って、イベントタイプを「COMMENT」に設定してレビューを提出してください。まとめコメントは空文字列("")で構いません（※「REQUEST_CHANGES」は使わないでください）。

            **レビュー時の重要事項**
            
            * **重複を避ける:** 過去のレビューで既に指摘された内容については、以下の場合を除き再度指摘しないでください：
                * 指摘に対する修正が不十分または誤っている場合
                * 新しい変更により以前の指摘が再び該当するようになった場合
                
            * **対応状況の考慮:** 過去の指摘事項に対して：
                * 対応済みの項目は肯定的に評価（ただしインラインコメントでは言及しない）
                * 未対応の項目で依然として重要なものは、優先度を明確にして再度指摘
                * 部分的に対応された項目は、残りの改善点を具体的に示す

            **コメントの書き方に関する重要事項**

            * **インラインコメントの構成:**
                * **結論を先に:** 各インラインコメントの冒頭で、指摘内容の要点を一行で簡潔に述べてください。
                * **理由と提案:** 結論の後に、そのように判断した理由や背景、具体的な修正案を詳しく説明してください。
                * **指摘中心に:** インラインコメントは、修正提案、バグの可能性、可読性の問題など、具体的な改善点に焦点を当ててください。

            * **ポジティブなフィードバックについて:**
                * **インラインコメントでは禁止:** インラインコメントでは肯定的なコメントは一切残さないでください。改善点や懸念事項の指摘のみに徹してください。
                * **自動更新コメントのみ使用:** レビュー自体にまとめコメントは不要です。Claude Code Actionが自動的に更新する同一コメント内で全ての情報を提供するため、個別のまとめコメントは記載しないでください。

            * **レビューの観点について:**
            - CLAUDE.mdのガイドラインに従っているか
            - バグやセキュリティリスクがないか
            - 保守性や可読性は十分か
            - 設計やアーキテクチャに妥当性があるか
            - コード品質とベストプラクティス
            - 潜在的なバグや問題
            - セキュリティの懸念
            - テストコードが適切に書かれているか
              - カバレッジが十分か
              - エッジケースや異常系のテストが含まれているか
              - テストの品質と信頼性
              - オーバーテストがないか
            
            **重要な再確認事項:**
            このPRレビューを実施する際は、上記のすべての指示に従ってください。特に以下の点を必ず守ってください：
            1. インラインコメントは改善点・懸念事項・バグの可能性の指摘のみに限定する（肯定的コメントは一切禁止）
            2. レビュー提出時のまとめコメントは空文字列("")とし、個別のレビュー完了コメントは投稿しない
            3. スティッキーコメントが自動更新されるため、それ以外の総括的なコメントは不要
            4. 各インラインコメントでは結論を先に述べ、その後に理由と具体的な修正案を提示する
            5. CLAUDE.mdのガイドラインに従っているかを必ず確認する
            6. 過去のレビュー履歴を考慮し、重複した指摘を避ける
            
            すべてのフィードバックは日本語で、建設的かつ実用的な内容にしてください。

          # Sticky comments を使用して同一PRへの複数回のレビューを管理
          use_sticky_comment: true