name: E2E Tests (Self-hosted Runner)

on:
  # プルリクエストで自動実行
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'frontend/**'
      - 'api/**'
      - 'e2e/**'
      - '!frontend/**/*.md'
      - '!api/**/*.md'
      - '!e2e/**/*.md'
      - '.github/workflows/e2e-ci.yml'
  # mainブランチへのpushで実行
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'api/**'
      - 'e2e/**'
      - '!frontend/**/*.md'
      - '!api/**/*.md'
      - '!e2e/**/*.md'
      - '.github/workflows/e2e-ci.yml'
  # 手動トリガー（デバッグ用）
  workflow_dispatch:

# GitHub Actions無料枠節約のため、同一PRで複数実行時は前の実行をキャンセル
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: self-hosted
    timeout-minutes: 20
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '22'
      
      - name: Clean pnpm setup directory
        run: |
          # pnpm/action-setupのデフォルトディレクトリをクリーンアップ
          rm -rf ~/setup-pnpm || true
          rm -rf /home/runner-user/setup-pnpm || true
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
      
      # ルートの依存関係をインストール
      - name: Install root dependencies
        run: |
          pnpm config set store-dir /tmp/pnpm-store-${{ github.run_id }}
          pnpm install --frozen-lockfile --prefer-offline false
      
      # API依存関係のインストール
      - name: Install API dependencies
        working-directory: api
        run: |
          export PATH="$PNPM_HOME:$PATH"
          pnpm install --frozen-lockfile --prefer-offline false
      
      # better-sqlite3のリビルド
      - name: Rebuild better-sqlite3
        working-directory: .
        run: |
          cd node_modules/better-sqlite3
          npm run install --verbose || npm run build-release || node-gyp rebuild
          ls -la build/ || true
          ls -la build/Release/ || true
      
      # Frontend依存関係のインストール
      - name: Install Frontend dependencies
        working-directory: frontend
        run: |
          export PATH="$PNPM_HOME:$PATH"
          pnpm install --frozen-lockfile --prefer-offline false
      
      # E2E依存関係のインストール
      - name: Install E2E dependencies
        working-directory: e2e
        run: |
          export PATH="$PNPM_HOME:$PATH"
          pnpm install --frozen-lockfile --prefer-offline false
      
      # セルフホストランナーには既にChromeがインストール済みのためスキップ
      
      # E2E用データベースのセットアップ
      - name: Setup E2E Database
        working-directory: api
        run: |
          export PATH="$PNPM_HOME:$PATH"
          # データベースディレクトリを作成
          mkdir -p db
          # E2E用データベースファイルを作成
          touch db/e2e-test.db
          # E2E用の環境でマイグレーションを実行
          NODE_ENV=e2e pnpm run db:migrate:dev
      
      # APIサーバーのビルド
      - name: Build API
        working-directory: api
        run: |
          export PATH="$PNPM_HOME:$PATH"
          pnpm run build
      
      # Frontendのビルド
      - name: Build Frontend
        working-directory: frontend
        run: |
          export PATH="$PNPM_HOME:$PATH"
          pnpm run build
        env:
          NEXT_PUBLIC_API_URL: /api
      
      # E2Eテストの実行
      - name: Run E2E tests
        env:
          CI: true
          E2E_MODE: true
        run: |
          # 既存のプロセスをクリーンアップ（セルフホストランナー用）
          pkill -f "next start" || true
          pkill -f "tsx server-e2e.js" || true
          sleep 2
          
          # APIサーバーをE2Eモードで起動
          cd api && export PATH="$PNPM_HOME:$PATH" && pnpm run dev:e2e &
          API_PID=$!
          
          # Frontendサーバーを起動（productionモード）
          cd frontend && export PATH="$PNPM_HOME:$PATH" && E2E_MODE=true pnpm run start &
          FRONTEND_PID=$!
          
          # サーバーの起動を待つ（タイムアウトは15秒に短縮）
          echo "Waiting for API server..."
          timeout 15 sh -c 'until curl -f http://localhost:3004/api/health 2>/dev/null; do sleep 1; done' || {
            echo "API server failed to start"
            kill $API_PID $FRONTEND_PID 2>/dev/null || true
            exit 1
          }
          
          echo "Waiting for Frontend server..."
          timeout 15 sh -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 1; done' || {
            echo "Frontend server failed to start"
            kill $API_PID $FRONTEND_PID 2>/dev/null || true
            exit 1
          }
          
          # E2Eテストを実行（ヘッドレスモードで失敗時は即座に終了）
          cd e2e
          export PATH="$PNPM_HOME:$PATH"
          pnpm run test --reporter=list || TEST_RESULT=$?
          
          # サーバーを停止
          kill $API_PID $FRONTEND_PID 2>/dev/null || true
          
          # テスト結果を返す
          exit ${TEST_RESULT:-0}
      
      # テスト結果の表示（失敗時のみ）
      - name: Show test failure summary
        if: failure()
        run: |
          echo "E2E tests failed. Check the logs above for details."
          # Playwrightのテスト結果サマリーがあれば表示
          if [ -f e2e/test-results/.last-run.json ]; then
            echo "Test run summary:"
            cat e2e/test-results/.last-run.json || true
          fi
      
      # クリーンアップ
      - name: Cleanup
        if: always()
        run: |
          # プロセスのクリーンアップ（セルフホストランナー用）
          pkill -f "next start" || true
          pkill -f "tsx server-e2e.js" || true
          # pnpmストアのクリーンアップ
          rm -rf /tmp/pnpm-store-${{ github.run_id }} || true
          # E2Eテスト用データベースの削除
          rm -f api/db/e2e-test.db || true