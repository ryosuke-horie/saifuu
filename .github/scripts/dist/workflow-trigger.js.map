{
  "version": 3,
  "sources": ["../workflow-trigger.ts"],
  "sourcesContent": ["import { getOctokit } from '@actions/github';\n\nexport interface TriggerOptions {\n  target: string;\n  prNumber: number;\n  ref: string;\n  token: string;\n  owner: string;\n  repo: string;\n}\n\nexport interface TriggerResult {\n  success: boolean;\n  workflowRunId?: number;\n  workflowName?: string;\n  error?: string;\n}\n\nexport async function triggerWorkflow(options: TriggerOptions): Promise<TriggerResult> {\n  const { target, prNumber, ref, token, owner, repo } = options;\n  \n  // \u30BF\u30FC\u30B2\u30C3\u30C8\u304B\u3089\u30EF\u30FC\u30AF\u30D5\u30ED\u30FC\u30D5\u30A1\u30A4\u30EB\u540D\u3092\u6C7A\u5B9A\n  const workflowMap: Record<string, string> = {\n    'api': 'api-ci.yml',\n    'frontend': 'frontend-ci.yml'\n  };\n  \n  const workflowFileName = workflowMap[target];\n  if (!workflowFileName) {\n    return {\n      success: false,\n      error: `Invalid target: ${target}`\n    };\n  }\n  \n  try {\n    const octokit = getOctokit(token);\n    \n    // workflow_dispatch \u30A4\u30D9\u30F3\u30C8\u3092\u30C8\u30EA\u30AC\u30FC\n    const response = await octokit.rest.actions.createWorkflowDispatch({\n      owner,\n      repo,\n      workflow_id: workflowFileName,\n      ref,\n      inputs: {\n        pr_number: prNumber.toString()\n      }\n    });\n    \n    // \u30EF\u30FC\u30AF\u30D5\u30ED\u30FC\u306E\u5B9F\u884CID\u3092\u53D6\u5F97\uFF08\u5B9F\u969B\u306E\u5B9F\u88C5\u3067\u306F\u8FFD\u52A0\u306EAPI\u30B3\u30FC\u30EB\u304C\u5FC5\u8981\uFF09\n    // \u3053\u3053\u3067\u306F\u7C21\u7565\u5316\u306E\u305F\u3081\u30C0\u30DF\u30FC\u306EID\u3092\u8FD4\u3059\n    return {\n      success: true,\n      workflowRunId: Date.now(), // \u5B9F\u969B\u306E\u5B9F\u88C5\u3067\u306F\u6B63\u3057\u3044ID\u3092\u53D6\u5F97\n      workflowName: workflowFileName\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: `GitHub API error: ${error.message || 'Unknown error'}`\n    };\n  }\n}"],
  "mappings": ";AAAA,SAAS,kBAAkB;AAkB3B,eAAsB,gBAAgB,SAAiD;AACrF,QAAM,EAAE,QAAQ,UAAU,KAAK,OAAO,OAAO,KAAK,IAAI;AAGtD,QAAM,cAAsC;AAAA,IAC1C,OAAO;AAAA,IACP,YAAY;AAAA,EACd;AAEA,QAAM,mBAAmB,YAAY,MAAM;AAC3C,MAAI,CAAC,kBAAkB;AACrB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,mBAAmB,MAAM;AAAA,IAClC;AAAA,EACF;AAEA,MAAI;AACF,UAAM,UAAU,WAAW,KAAK;AAGhC,UAAM,WAAW,MAAM,QAAQ,KAAK,QAAQ,uBAAuB;AAAA,MACjE;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb;AAAA,MACA,QAAQ;AAAA,QACN,WAAW,SAAS,SAAS;AAAA,MAC/B;AAAA,IACF,CAAC;AAID,WAAO;AAAA,MACL,SAAS;AAAA,MACT,eAAe,KAAK,IAAI;AAAA;AAAA,MACxB,cAAc;AAAA,IAChB;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,qBAAqB,MAAM,WAAW,eAAe;AAAA,IAC9D;AAAA,EACF;AACF;",
  "names": []
}
