{
  "version": 3,
  "sources": ["../parse-ci-comment.ts"],
  "sourcesContent": ["export interface ParseResult {\n  isValid: boolean;\n  targets: string[];\n}\n\nexport function parseCIComment(comment: string): ParseResult {\n  const validTargets = ['api', 'frontend'];\n  const targets = new Set<string>();\n  \n  // null, undefined, \u307E\u305F\u306F\u975E\u6587\u5B57\u5217\u306E\u5834\u5408\u306F\u7A7A\u306E\u7D50\u679C\u3092\u8FD4\u3059\n  if (!comment || typeof comment !== 'string') {\n    return {\n      isValid: false,\n      targets: []\n    };\n  }\n  \n  // \u30B3\u30E1\u30F3\u30C8\u3092\u884C\u3054\u3068\u306B\u5206\u5272\u3057\u3066\u51E6\u7406\n  const lines = comment.split('\\n');\n  \n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    \n    // /ci <target> \u30D1\u30BF\u30FC\u30F3\u3092\u63A2\u3059\n    const match = trimmedLine.match(/^\\/ci\\s+(\\w+)$/);\n    if (match) {\n      const target = match[1];\n      if (validTargets.includes(target)) {\n        targets.add(target);\n      }\n    }\n  }\n  \n  return {\n    isValid: targets.size > 0,\n    targets: Array.from(targets)\n  };\n}"],
  "mappings": ";AAKO,SAAS,eAAe,SAA8B;AAC3D,QAAM,eAAe,CAAC,OAAO,UAAU;AACvC,QAAM,UAAU,oBAAI,IAAY;AAGhC,MAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS,CAAC;AAAA,IACZ;AAAA,EACF;AAGA,QAAM,QAAQ,QAAQ,MAAM,IAAI;AAEhC,aAAW,QAAQ,OAAO;AACxB,UAAM,cAAc,KAAK,KAAK;AAG9B,UAAM,QAAQ,YAAY,MAAM,gBAAgB;AAChD,QAAI,OAAO;AACT,YAAM,SAAS,MAAM,CAAC;AACtB,UAAI,aAAa,SAAS,MAAM,GAAG;AACjC,gBAAQ,IAAI,MAAM;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,SAAS,QAAQ,OAAO;AAAA,IACxB,SAAS,MAAM,KAAK,OAAO;AAAA,EAC7B;AACF;",
  "names": []
}
